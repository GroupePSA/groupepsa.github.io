openapi: 3.0.0
servers:
  - url: 'https://client.base.uri/root'
info:
  version: ''
  title: Groupe PSA Connected Car B2B API
  description: | 
                # Introduction
  
                This is the description of the *Groupe PSA Connected Car V2 & V3 B2B API* Webhooks template.This specification is written in **OpenAPI Specification version 3** and can
                be displayed using [ReDoc](https://github.com/Rebilly/ReDoc) or
                [Swagger](http://swagger.io).
                 
                # Security
                  * The authentication is already set when registering the callback using the attributes field to set HTTP header entries for the authentication(usually a _basic authentication_).
                  * Https scheme should be supported with the webhook server with a certificate issued by a trusted public and known CA. 

    
  license:
    name: Groupe PSA Licence
    url: 'https://www.psa-peugeot-citroen.com/'
tags:
  - name: Remote-Webhook
    description: Remote webhook model.
  
  - name: Monitor-Webhook
    description: Monitor webhook model.
 
paths:
  '/remote/webhook':
    post:
      tags:
        - Remote-Webhook
      summary: Post a list of remote events.
      description: |
                    Post a list of remote events.
      operationId: postRemoteEvents
      parameters:
        - $ref: '#/components/parameters/headerAttribute'
        - $ref: '#/components/parameters/queryAttribute'
      requestBody:
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/RemoteEvents'
      responses:
        202:
         description: Post Ok(accepted).
        default:
          $ref: '#/components/responses/PostErrorResponse'
  
  '/monitors/webhook':
    post:
      tags:
        - Monitor-Webhook
      summary: Post a list of monitor events.
      description: |
                    Post a list of avent raised by a registered monitor.
      operationId: postMonitorEvents
      parameters:
        - $ref: '#/components/parameters/headerAttribute'
        - $ref: '#/components/parameters/queryAttribute'
      requestBody:
        content:
          application/json:
            schema:
               $ref: '#/components/schemas/MonitorEvents'
      responses:
        201:
         description: Post Ok.
        default:
          $ref: '#/components/responses/PostErrorResponse'

 
components:
  securitySchemes:
    basicAuth:     # <-- arbitrary name for the security scheme
      type: http
      scheme: basic
  schemas:
    Attributes:
          type: array
          description: >-
            Additional attribute set that was defined as 'body' attribute type when registering the monitor (a set of key / values)
          items:
            type: object
            properties:
              key:
                type: string
              value:
                type: string
            required:
              - key
              - value  
   
  
  
    MonitorEvents:
      title: MonitorEvents
      description: Monitor event list. This list will contain only one item when the batch-notify (see Monitor API) is not set.
      type: object
      properties:
        monitorId:
           $ref: '#/components/schemas/MonitorId'
        attributes:   
            $ref: '#/components/schemas/Attributes'
       
        events:
              type: array
              items:
                $ref: '#/components/schemas/MonitorEvent'
    
    MonitorEvent:
      title: MonitorEvent
      type: object
      properties:
      
        vin:
          description: Identifier of the vehicle that raises the event.
          type: string  
        eventDate:
          description: The date on which the event was raised..
          type: string
          format: dateTime
       # position:
        #  $ref: '#/components/schemas/Position'
       
        values:
          type: array
          description: Values that caused the trigger. If subscribed monitor trigger is not a compound one then the array will contain only one item.
          items:
            type: object
            description: Values pairs that caused the event.
            properties:
              data:
                  type: string
                  enum:
                  - vehicle.alert
                  - vehicle.odometer
                  - vehicle.engines.running
                  - vehicle.engines.thermic.oil.temp
                  - vehicle.energy.electric.level
                  - vehicle.energy.electric.autonomy
                  - vehicle.energy.fuel.level
                  - vehicle.energy.fuel.autonomy
                  - vehicle.autonomy
                  - vehicle.energy.charging.status
                  - vehicle.energy.charging.plugged
                  - vehicle.doorsState.lockedState
                  - vehicle.doorsState.opening
                  - vehicle.kinetic.moving
                  - vehicle.kinetic.speed
                  - vehicle.trip
                  - vehicle.maintenance.daysBeforeMaintenance
                  - vehicle.maintenance.mileageBeforeMaintenance
                  - vehicle.safety.beltWarning
                  - environment.air.temp
                  - privacy.state
                
                  description: The monitored data (operand of a trigger).
              value: 
                description: Values that caused the trigger. Could be a list of data values in case of 'includedIn' operation is used
                type: object
                properties:
                      type:
                        type: string
                        enum: [string, obj.alert]
                      body:
                        type: object
                        properties:
                        
                          literalValue:
                            type: string
                            description: A literal representation of the primitive data value. The client application should be aware of that and should convert it regarding the trigger data type.  
                          objectValues:
                            type: array 
                            items:
                              type: object
                              description: For this object schema definition (based on the type of field), refere to the API Spec definition.
                    
        extensions:
          description: Defines the extra vehicle data as specified in the monitor extended eventparam file (see Monitor paramaeter objecrt definition in the API Spec)
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                description: Speficies the data type of body items. 
                enum: [vehicle.doorsState, vehicle.status, vehicle.maintenance,vehicle.position, vehicle.telemetry, vehicle.alerts]
              body:
                type: array
                description: 
                  Extended data can be expressed as a list of objects because in some case, a vehicle data state should be expressed as a list of value (such as active alerts at a given time). In this spec, those data are expressed as generic object and the type is provided (see type field) and so  the client application should be aware of that and should convert it regarding this data type.
                items:
                  type: object
                  properties:
                    doorState:
                      type: object
                    status:
                      type: object
                    maintenance:
                      type: object
                    position:
                      type: object  
                    telemetry:
                      type: object
                    alerts:
                      type: array
                      items:  
                         type: object 
                  
        
        refresh:
          description: |
              Indicates whether the event is a refresh (reminder) one or not.
              * ```false``` means entering the context of the trigger (1st time the trigger valued true). 
              * ```true``` means this is it a reminder event (already within trigger satisfied context).
          type: boolean

    
    MonitorId:
      type: string
      description: The identifier of monitor that raised the event.  
    RemoteActionId:
      type: string
      description: The uniq remote action ID. This ID is returned when the remote action is posted and accepted.
      
    RemoteCallbackId:
      type: string
      description: Uniq remote callback ID used to notify events. This Id refers to the remote callback created at B2B API..  
      
    RemoteEvents:
      title: RemoteEvents
      description: Remote event list. This list will contain only one item when the batch-notify (see Remote API) is not set.
      type: object
      properties:
        callbackId:
           $ref: '#/components/schemas/RemoteCallbackId'
        attributes:   
            $ref: '#/components/schemas/Attributes'
       
        events:
              type: array
              items:
                $ref: '#/components/schemas/RemoteEvent'
    RemoteType:
      type: string    
      enum: 
            - ThermalPreconditioning
            - ElectricBatteryChargingRequest
            - Horn
            - Doors
            - Lights
            - Immobilization
            - Stolen
            - VehicleState
            - ChargingState
    RemoteEventType:
      description: | 
        The event type. See```status```for event sate.
        * Pending event is related to intermediate state of the action before it is handled by the vehicle.
        * Done event is related to a final state of the action when handled by the vehicle.
         
      type: string    
      enum: 
            - Pending
            - Done
            
    RemoteDoneEventStatus:
      description: | 
        The reponse event status. 
         
      type: string    
      enum: 
            - Success
            - SuccessCauseAlreadyReached
    RemotePendingEventStatus:
      description: | 
        The processing event status. 
         
      type: string    
      enum: 
            - Accepted
            - WakingUpVehicle
            - CheckingVehicle
            - SentToVehicle
            - VehicleBatteryChargeTooLow
            - TooManyWakeUpsOverMonth
    RemoteFailedEventStatus:
      description: | 
        The failure cause for event with failed status. This field is filled only is faillure state. 
         
      type: string    
      enum: 
            - GeneralError
            - VehicleError
            - VehicleConnectionTimeout
            - MissingRights
            - MissingRightsDueToVehiclePrivacyLevel
            - MissingRightsDueToVehicleBatteryLevel
            - MissingVehicleKeyRights
            - SameActionInProgress
            - VehicleRunning
            - NotStolen
            - MaxActionNumberReached       
      
    RemoteEventStatus:
              type: object
              properties:
                type:   
                  $ref: '#/components/schemas/RemoteEventType'
                status:
                  oneOf:
                    - $ref: '#/components/schemas/RemoteDoneEventStatus'
                    - $ref: '#/components/schemas/RemotePendingEventStatus'
                failureCause:   
                  $ref: '#/components/schemas/RemoteFailedEventStatus'
               
              required: [type,status]
              
    
      
    RemoteEvent:
      title: RemoteEvent
      type: object
      properties:
        remoteActionId:
          $ref: '#/components/schemas/RemoteActionId'
      
        vin:
          description: Identifier of the vehicle that raises the event.
          type: string  
        eventDate:
          description: The date when the event was raised.
          type: string
          format: date-time
        remoteType:
          $ref: '#/components/schemas/RemoteType'
        eventStatus:
            $ref: '#/components/schemas/RemoteEventStatus'

    xError:
      type: object
      description: Detailed error
      properties:
        code:
          description: The application error code (do not confuse with http response code which is handled in http headed)
          type: integer
        debug:
          description: To investigate potential mismatches (such as the soft version or component name..). 
          type: string
        message:
          description: A human-readable error message.
          type: string
      example:
        code: 500123
        debug: CMP_001234
        message: Not able to process the post.
        
   

  ########################### RESPONSES
  
  
  responses:
    PostErrorResponse:
      description: Post event error
      content:
       application/json:
        schema:
          $ref: '#/components/schemas/xError'     
          
          
          
          ################### PARMS
          
          
          
  parameters:
    headerAttribute:
      name: <header-attribute-key> 
      description: |
         An attribute key/value as specified in the registered callback in additional attributes set as an HTTP header entry(_can also be used as an **Authorization** (Bearer authentication)).
         
         **Note**:  ```This parameter is repeated as many times as attributes typed as 'header' in the declared attribute-set when registring of the callback.```
      in: header
      required: true
      schema:
        type: string
    queryAttribute:
      name: <query-attribute-key> 
      description: |
         An attribute key/value as specified in the registered callback in additional attributes set as HTTP query parameter.
         
         **Note**:  ```This parameter is repeated as many times as attributes typed as 'query' in the declared attribute-set when registring of the callback.```
      in: header
      required: true
      schema:
        type: string
        
    tokenAuth:
      name: authorization
      description: >-
        HTTP token authentication (Bearer authentication) as part of .
      in: header
      required: true
      schema:
        type: string
        pattern: Bearer (\w|-|=)*
